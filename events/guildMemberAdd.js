const { EmbedBuilder } = require("discord.js");
const Server = require("../models/serverSchema");
const colorTable = require("../utils/colorTable");

const welcomeMessages = [
  "Bienvenue ${member}! Nous sommes ravis de t'accueillir sur le serveur. üéâ N'h√©site pas √† te pr√©senter !",
  "Salut ${member} ! Heureux de te voir ici ! Passe un bon moment parmi nous. üòä",
  "Hey ${member} ! Bienvenue dans notre communaut√© ! Fais comme chez toi. üòÑ",
  "Coucou ${member} ! Content que tu nous aies rejoints. üí¨ Rejoins-nous vite dans la discussion !",
  "Bienvenue ${member} ! Pr√™t pour une belle aventure avec nous ? üöÄ",
  "Un nouveau membre est l√† ! Accueillons chaleureusement ${member} ! ü•≥",
  "H√© ${member}, bienvenue sur notre serveur ! Ton aventure commence ici. üåü",
  "Bonjour ${member} ! Ravie de te compter parmi nous. Rejoins vite les discussions ! üí°",
  "Wow, regarde qui est l√† ! ${member}, sois le/la bienvenu(e) ! üéä",
  "Bienvenue ${member} ! Nous sommes l√† pour t'aider si tu as des questions. üõ†Ô∏è",
];

module.exports = {
  name: "guildMemberAdd", // Nom de l'√©v√©nement
  async execute(member) {
    const guild = member.guild;
    let server = await Server.findOne({ guildId: guild.id }).populate("config");
    const config = server.config;

    if(!server.config.welcomeChannel) {
      return interaction.reply({
        content: `‚ùå La configuration du serveur est introuvable.`,
        ephemeral: true,
      });
    }

    // V√©rifie le canal de bienvenue
    const welcomeChannel = guild.channels.cache.get(config.welcomeChannel);
    if (welcomeChannel) {
      try {
        if (config.welcomeMessage) {
          await welcomeChannel.send(
            config.welcomeMessage.replace("@user", member)
          );
        } else {
          const randomMessage =
            welcomeMessages[Math.floor(Math.random() * welcomeMessages.length)];
          await welcomeChannel.send(randomMessage.replace("${member}", member));
        }
      } catch (error) {
        console.error(
          `Erreur lors de l'envoi du message de bienvenue : ${error}`
        );
      }
    } else {
      console.log(`Canal '${welcomeChannel}' introuvable.`);
    }

    // V√©rifie le r√¥le
    const newMemberRole = guild.roles.cache.find(
      (role) => role.id === config.newMemberRole
    );
    if (newMemberRole) {
      try {
        await member.roles.add(newMemberRole);
      } catch (error) {
        console.error(`Erreur lors de l'attribution du r√¥le : ${error}`);
      }
    }

    const logsChannel = guild.channels.cache.get(config.logsChannel);
    if (logsChannel) {
      try {
        if(!server.config.welcomeChannel) {
          return interaction.reply({
            content: `‚ùå La configuration du serveur est introuvable.`,
            ephemeral: true,
          });
        }
        const embed = new EmbedBuilder()
          .setColor(colorTable.success)
          .setAuthor({
            name: member.user.displayName,
            iconURL: member.user.displayAvatarURL({ dynamic: true }),
          })
          .setDescription(
            `a rejoint le serveur ${
              newMemberRole
                ? "et a re√ßu le r√¥le " + newMemberRole.name
                : "mais n'a pas re√ßu le r√¥le "
            }`
          )
          .setTimestamp();

        await logsChannel.send({ embeds: [embed] });
      } catch (error) {
        console.error(`Erreur lors de l'envoi du message de logs : ${error}`);
      }
    }

    // V√©rification des nouveaux comptes si activ√©e
    if (config.accountCheckEnabled) {
      const createdAt = member.user.createdAt;
      const now = new Date();
      const timeDiff = now - createdAt;
      const twoDaysInMs = 2 * 24 * 60 * 60 * 1000;

      if (timeDiff < twoDaysInMs) {
        const logsChannel = guild.channels.cache.get(config.logsChannel);
        if (!logsChannel) {
          console.log(`Canal '${logsChannelName}' introuvable.`);
          return;
        }

        const embed = new EmbedBuilder()
          .setColor(colorTable.warning) // Couleur orange pour avertissement
          .setTitle("‚ö†Ô∏è Nouveau compte r√©cent d√©tect√©")
          .setDescription(
            `Un compte r√©cent a rejoint le serveur : ${member.user.displayName}`
          )
          .addFields(
            {
              name: "Cr√©√© le",
              value: `<t:${Math.floor(createdAt / 1000)}:F>`,
            },
            { name: "Utilisateur", value: `${member.user}`, inline: true },
            { name: "ID", value: `${member.user.id}`, inline: true }
          )
          .setTimestamp();

        try {
          await logsChannel.send({ embeds: [embed] });
          console.log(
            `Alerte envoy√©e pour le compte r√©cent : ${member.user.tag}`
          );
        } catch (error) {
          console.error(
            `Erreur lors de l'envoi de l'alerte pour le compte r√©cent : ${error}`
          );
        }
      }
    }
  },
};
